#!/bin/zsh

# Default debounce interval in seconds
default_debounce_interval=2
# Default sleep interval in seconds when no command is run
default_sleep_interval=1
# Default value for running the command at startup
run_command_on_startup=false
# Default indentation level
default_indentation_level=2

# Initialize debounce and sleep intervals with defaults
debounce_interval=$default_debounce_interval
sleep_interval=$default_sleep_interval

# Initialize an array to store directories to watch
directories_to_watch=()

# Initialize the fswatch process ID
fswatch_pid=""

# Initialize the last event time to 0
last_event=0

# Initialize the event that triggered the last command to run to 0
last_triggered_event=0

# File to store the last event time in the system's temporary directory
last_event_file="$(mktemp -t last_event)"

# Initialize the indentation level
indentation_level=$default_indentation_level

# Initialize the event counter
event_count=0

# Initialize the state variable
state="Waiting"

# Colors and formatting
bold=$(tput bold)
reset=$(tput sgr0)
red=$(tput setaf 1)
yellow=$(tput setaf 3)
green=$(tput setaf 2)
cyan=$(tput setaf 6)

# Function to run the provided command with indentation
run_command() {
    local command="$1"
    print_status_message
    last_triggered_event=$last_event
    eval "$command" | sed "s/^/${green}â”‚${reset}$(printf ' %.0s' $(seq 1 $indentation_level))/" # Indent the command's output
}

# Function to print the status message
print_status_message() {
    case "$state" in
        "Waiting")
            status_message="${bold}${yellow}Waiting${reset}"
            ;;
        "Running")
            status_message="${bold}${green}Running command:${reset} ${command_to_run}\n"
            ;;
        "Pending")
            status_message="${bold}${red}Pending${reset}"
            for _ in $(seq $event_count); do
                status_message="${status_message}${bold}.${reset}"
            done
            ;;
    esac
    echo -n "\033[2K\r$status_message"
}

# Function to check for changes and debounce
check_for_changes() {
    current_time=$(date +%s)
    last_event=$(cat "$last_event_file" 2>/dev/null || echo 0)

    time_since_last_event=$((current_time - last_event))

    # Check if a new event has occurred
    if [ $last_event -gt $last_triggered_event ]; then
        # Check if the debounce interval has passed
        if [ $time_since_last_event -ge $debounce_interval ]; then
            event_count=0 # Reset event counter
            state="Running"
            run_command "$1"
            state="Waiting"
        fi
    else
        sleep $sleep_interval
    fi
}

# Function to cleanup and terminate the fswatch process
cleanup() {
    if [ -n "$fswatch_pid" ]; then
        echo "Terminating fswatch process (PID: $fswatch_pid)..."
        kill "$fswatch_pid"
    fi
    # Clean up the last event file
    rm -f "$last_event_file"
    exit 0
}

# Trap the INT signal (CTRL+C) and cleanup gracefully
trap cleanup INT

# Parse command line options
while getopts "d:c:i:s:ni:" opt; do
    case $opt in
        d)
            directories_to_watch+=("$OPTARG")
            ;;
        c)
            command_to_run="$OPTARG"
            ;;
        i)
            debounce_interval="$OPTARG"
            ;;
        s)
            sleep_interval="$OPTARG"
            ;;
        n)
            run_command_on_startup=true
            ;;
        # Add option for specifying the indentation level
        i)
            indentation_level="$OPTARG"
            ;;
        \?)
            echo "Usage: $0 -d <directory> -c <command> -i <debounce_interval> -s <sleep_interval> [-n] [-i <indentation_level>]"
            exit 1
            ;;
    esac
done

# Check if directories and command are provided
if [ ${#directories_to_watch[@]} -eq 0 ] || [ -z "$command_to_run" ]; then
    echo "Usage: $0 -d <directory> -c <command> -i <debounce_interval> -s <sleep_interval> [-n] [-i <indentation_level>]"
    exit 1
fi

# Initial message
#echo "Watching directories: ${directories_to_watch[*]} and running command: $command_to_run"
#echo "Debounce interval: $debounce_interval seconds"
#echo "Sleep interval: $sleep_interval seconds"

echo "0" > "$last_event_file"

if [ "$run_command_on_startup" = true ]; then
    event_count=0
    state="Running"
    run_command "$command_to_run"
    state="Waiting"
fi

print_status_message

# Start fswatch to monitor all specified directories
fswatch -o "${directories_to_watch[@]}" |
while read; do
    # Update the last event time in the file
    echo "$(date +%s)" > "$last_event_file"
    ((event_count++)) # Increment event counter
    state="Pending"
    print_status_message
done &
fswatch_pid=$$

# Continuously check for changes in the foreground and run the specified command
while true; do
    print_status_message
    check_for_changes "$command_to_run"
done

