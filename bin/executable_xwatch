#!/bin/zsh
# set -eux

# Default debounce interval in seconds
default_debounce_interval=2
# Default sleep interval in seconds when no command is run
default_sleep_interval=1
# Default value for running the command at startup
run_command_on_startup=false
# Default indentation level
default_indentation_level=2

# Initialize debounce and sleep intervals with defaults
debounce_interval=$default_debounce_interval
sleep_interval=$default_sleep_interval

# Initialize an array to store directories to watch
directories_to_watch=()

# Initialize the fswatch process ID
fswatch_pid=""

# Initialize the last event time to 0
last_event=0
last_triggered_event=0

# Initialize the event count of the last triggered event to 0
total_event_count=0
last_triggered_event_count=0

# Initialize the command process ID (PID)
command_pid=""

# Create temp files in the system directory so background processes can write to them
# and the foreground process can read from them (background loops are executed in different environments)
last_event_file="$(mktemp -t last_event)"
total_event_count_file="$(mktemp -t total_event_count)"
command_exit_status_file="$(mktemp -t command_exit_status)"

indentation_level=2

# Initialize state
state="Waiting"

# Colors and formatting
bold=$(tput bold)
reset=$(tput sgr0)
black=$(tput setaf 0)   # 000
red=$(tput setaf 1)     # 001
green=$(tput setaf 2)   # 010
blue=$(tput setaf 4)    # 100
yellow=$(tput setaf 3)  # 011
cyan=$(tput setaf 6)    # 110
magenta=$(tput setaf 5) # 101
white=$(tput setaf 7)   # 111

blackbg=$(tput setab 0) # 000
redbg=$(tput setab 1)   # 001
greenbg=$(tput setab 2) # 010
bluebg=$(tput setab 4)  # 100

yellowbg=$(tput setab 3)  # 011
cyanbg=$(tput setab 6)    # 110
magentabg=$(tput setab 5) # 101
whitebg=$(tput setab 7)   # 111

# Function to run the provided command with indentation in the background
run_command_background() {
  local command="$1"
  # Run the command in the background, capture its output and exit status
  {
    eval "$command" | sed "s/^/${green}â”‚${reset}$(printf ' %.0s' $(seq 1 $indentation_level))/"
    echo "$?" >"$command_exit_status_file"
  } &
  command_pid=$!
}

# Function to reset variables that are used for tracking command status
reset_command_status() {
  set_state "$1"
  command_pid=""
  rm "$command_exit_status_file"
  touch "$command_exit_status_file"
}

# Function to check the command exit status
check_command_exit_status() {
  if [[ (-f "$command_exit_status_file") && ("$state" == "Running") ]]; then
    local cmd_status=$(cat "$command_exit_status_file")
    if [ -n "$cmd_status" ]; then
      if [ "$cmd_status" -eq 0 ]; then
        reset_command_status "Waiting"
      else
        reset_command_status "Error"
      fi
    fi
  fi
}

# Function to kill the running command
kill_running_command() {
  if [ -n "$command_pid" ]; then
    echo -n "Killing the running command (PID: $command_pid)..."
    kill "$command_pid" >/dev/null 2>&1
    reset_command_status "Waiting"
  fi
}

# Function to print the status message
print_status_message() {
  case "$state" in
  "Running")
    status_message="${bold}${green}Running command:${reset} ${command_to_run}\n"
    ;;
  "Waiting")
    status_message="${bold}${blue}Waiting"
    ;;
  "Error")
    status_message="${bold}${white}${redbg}Error"
    ;;
  "Pending")
    status_message="${bold}${white}${bluebg}Pending"
    event_diff=$((total_event_count - last_triggered_event_count))
    for _ in $(seq ${event_diff}); do
      status_message="${status_message}."
    done
    status_message="${status_message}"
    ;;
  esac
  echo -n "\r\033[2K${status_message}${reset}"
}

set_state() {
  state="$1"
  print_status_message
}

# Function to check for changes and debounce
check_for_changes() {
  current_time=$(date +%s)
  last_event=$(cat "$last_event_file" 2>/dev/null || echo 0)

  # Check if a new event has occurred
  if [ $last_event -gt $last_triggered_event ]; then
    if [ "$state" = "Running" ]; then
      kill_running_command
    fi
    set_state "Pending"

    # Check if the debounce interval has passed
    time_since_last_event=$((current_time - last_event))
    if [ $time_since_last_event -ge $debounce_interval ]; then
      total_event_count=$(cat "$total_event_count_file" 2>/dev/null || echo 0)
      last_triggered_event=$last_event
      last_triggered_event_count=$total_event_count # Update the last triggered event count
      set_state "Running"
      run_command_background "$1"
    else
      # Small delay to stop from spinning and reading files over and over
      sleep 0.25
    fi
  else
    sleep $sleep_interval
  fi
}

# Function to cleanup and terminate the fswatch process
cleanup() {
  if [ -n "$fswatch_pid" ]; then
    echo "Terminating fswatch process (PID: $fswatch_pid)..."
    kill "$fswatch_pid"
  fi
  if [ -n "$command_pid" ]; then
    echo "Terminating command process (PID: $command_pid)..."
    kill "$command_pid"
  fi
  # Clean up the last event and total event count files
  rm -f "$last_event_file" "$total_event_count_file"
  # Remove the command exit status file if it exists
  rm -f "$command_exit_status_file"
  exit 0
}

# Trap the INT signal (CTRL+C) and cleanup gracefully
trap cleanup INT

# Parse command line options
while getopts "d:c:i:s:ni:" opt; do
  case $opt in
  d)
    directories_to_watch+=("$OPTARG")
    ;;
  c)
    command_to_run="$OPTARG"
    ;;
  i)
    debounce_interval="$OPTARG"
    ;;
  s)
    sleep_interval="$OPTARG"
    ;;
  n)
    run_command_on_startup=true
    ;;
  \?)
    echo "Usage: $0 -d <directory> -c <command> -i <debounce_interval> -s <sleep_interval> [-n]"
    exit 1
    ;;
  esac
done

# Check if directories and command are provided
if [ ${#directories_to_watch[@]} -eq 0 ] || [ -z "$command_to_run" ]; then
  echo "Usage: $0 -d <directory> -c <command> -i <debounce_interval> -s <sleep_interval> [-n] [-i <indentation_level>]"
  exit 1
fi

echo "0" >"$last_event_file"
echo "0" >"$total_event_count_file"

if [ "$run_command_on_startup" = true ]; then
  set_state "Running"
  run_command_background "$command_to_run"
fi

set_state "Waiting"

# Start fswatch to monitor all specified directories
fswatch -o "${directories_to_watch[@]}" |
  while read; do
    # Update the last event time in the file
    echo "$(date +%s)" >"$last_event_file"
    if [ -n "$total_event_count" ]; then
      total_event_count=$((total_event_count + 1))
    else
      total_event_count=1
    fi
    echo "$total_event_count" >"$total_event_count_file" # Update total event count
  done &
fswatch_pid=$!

# Continuously check for changes in the foreground and run the specified command
while true; do
  check_for_changes "$command_to_run"
  if [ "$state" = "Running" ]; then
    check_command_exit_status
  fi
done

